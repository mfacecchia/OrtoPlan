<!DOCTYPE html>

<html lang="en">
    <%- include('../partials/head.partial.ejs', {title: "Plantations"}) %>
    <body>
        <%- include('../partials/nav.partial.ejs', {showDropdownMenus: 'true'}) %>
        <dialog class = "modal" id = "removePlant">
            <div class = "modal-box">
                <div class = "flex flex-col justify-center items-center">
                    <header>
                        <b>Plant Removal</b>
                        <h1 class = "font-bold text-error">Warning</h1>
                    </header>
                    <p>Are you sure you want to remove "Plant 1"?</p>
                </div>
                <form method = "dialog" class = "modal-action flex-row p-2 box-border">
                    <button tabindex = "0" class = "btn btn-primary">No, close</button>
                    <button tabindex = "0" class = "btn btn-error">Yes, i'm sure</button>
                </form>
            </div>
        </dialog>
        <dialog class = "modal" id = "treatments">
            <div class = "modal-box space-y-5 text-center">
                <form method = "dialog">
                    <!-- TODO: Remove all forms before closing the dialog -->
                    <button class = "btn btn-square rounded-md btn-outline absolute right-2 top-2 btn-primary">X</button>
                </form>
                <div class = "flex flex-col justify-center items-center">
                    <header class = "mb-0">
                        <h1 class = "text-secondary font-bold">Treatments</h1>
                        <hr class = "animate-showHide w-20 green-line mx-auto">
                    </header>
                </div>
                <%- include('../partials/treatmentForm.partial.ejs', {
                    treatmentID: 1,
                    type: "Irrigation",
                    date: "2024-05-20",
                    recurrence: 30,
                    isDisabled: true,
                    separator: true
                }) %>
                <%- include('../partials/treatmentForm.partial.ejs', {
                    treatmentID: 2,
                    type: "Pruning",
                    date: "2024-05-30",
                    recurrence: 120,
                    isDisabled: true,
                    separator: true
                }) %>
                <!-- TODO: Add new treatment modal -->
                <div class = "btn btn-primary rounded-full w-1/2 py-2 px-3" id = "newTreatment" role = "button"><p>New treatment</p></div>
            </div>
        </dialog>
        <!-- TODO: Add new plant creation dialog form -->
        <section class = "h-64 bg-defaultPlantation bg-cover bg-center p-0 shadow-lg">
            <div class = "size-full bg-black opacity-30"></div>
        </section>
        <section>
            <div class = "mb-5">
                <b class = "text-primary">Pescara, IT</b>
                <h1 class = "font-bold">Plantation 1</h1>
                <hr class = "animate-showHide w-14 green-line origin-left">
            </div>
            <section id = "forecast">
                <p>Forecast for this <span class = "text-primary">area</span></p>
                <div class = "w-full p-4 rounded-xl shadow-xl">
                    <!-- TODO: Use GlideJS carousel to display forecast => https://glidejs.com/docs/ -->
                </div>
            </section>
            <!-- TODO: Change "Plants" color to "secondary" -->
            <h1 class = "font-bold">Your <span class = "text-primary">Plants</span></h1>
            <hr class = "animate-showHide w-24 green-line origin-left">
            <div class = "cardsContainer mt-5">
                <div class = "customCard">
                    <figure class = "bg-defaultPlant">
                        <div class = "absolute top-0 right-0 h-8 dropdown dropdown-end" alt = "Plantation Settings" title = "Plantation settings">
                            <!-- TODO: Move this to partials -->
                            <img tabindex = "0" role = "button" class = "h-full" src = "/assets/icons/menu.svg" alt = "Plant settings">
                            <ul class = "dropdown-content z-10 menu p-2 py-0 shadow-xl bg-base-100 rounded-xl w-40 overflow-y-scroll mr-3 textToRight">
                                <li onclick = "document.querySelector('#treatments').showModal()"><a tabindex = "0"><span class = "text-primary">Plan</span> Treatments</a></li>
                                <hr class = "w-1/2">
                                <li class = "textToRight" onclick = "document.querySelector('#removePlant').showModal();"><a tabindex = "0"><span class = "text-error">Remove</span> Plant</a></li>
                            </ul>
                        </div>
                    </figure>
                    <div class = "cardContent">
                        <p class = "text-primary">Plant family</p>
                        <h2>Plant 1</h2>
                    </div>
                </div>
                <div class = "customCard" onclick = "document.querySelector('#newPlantation').showModal();">
                    <figure class = "!shadow-none !h-36">
                        <img src = "/assets/icons/new_plant.svg">
                    </figure>
                    <div class = "cardContent">
                        <h2 class = "text-center">New <span class = "text-primary">Plant</span></h2>
                    </div>
                </div>
            </div>
        </section>
        <%- include('../partials/footer.partial.ejs') %>

        <!-- TODO: Move this to external JS file -->
        <script>
            /*
                * NOTE: Variable used to determine if the user wants to update the form's data
                * (since the default behaviour will be to call the submit function) automatically once clicked the "Edit button", this variable increments its value in order
                * to determine how many times the "edit" button has been clicked by the user (value `2` times means edited and then submit new changes)
            */
            let editButtonClicksCount = 0;

            document.querySelectorAll('.treatmentForm').forEach(form => {
                form.querySelector('button[data-btn-action="Remove"]').addEventListener('click', e => {
                    if(editButtonClicksCount){
                        editButtonClicksCount = 0;
                        resetTreatmentsList(form);
                        return
                    }
                    e.target.parentNode.setAttribute('type', 'button')
                    // TODO: Open confirmation modal
                    console.log(`Remove treatment with ID ${form.getAttribute('data-treatment-id')}`);
                });
                form.querySelector('button[data-btn-action="Edit"]').addEventListener('click', e => {
                    editButtonClicksCount++;
                    const treatmentID = form.getAttribute('data-treatment-id');
                    const formFields = form.querySelectorAll('input, textarea');
                    const resetTreatmentButton = form.querySelector('button[data-btn-action="Remove"]');
                    const submitTreatmentButton = e.target.parentNode;
                    // Giving  the user the ossibility of editing the selected treatment
                    formFields.forEach(field => {
                        field.removeAttribute('disabled');
                    });
                    // Setting buttons's icons
                    e.target.src = "/assets/icons/check.svg";
                    resetTreatmentButton.childNodes[0].src = "/assets/icons/cancel.svg";
                    resetTreatmentButton.setAttribute('type', 'reset');
                    // Getting all the other forms and disabling the buttons
                    form.parentNode.querySelectorAll(`form:not([data-treatment-id="${treatmentID}"], [method="dialog"])`).forEach(treatmentForm => {
                        treatmentForm.querySelectorAll('button').forEach(button => button.setAttribute('disabled', undefined));
                    });
                    document.querySelector('#newTreatment').setAttribute('disabled', undefined);

                    formFields[0].focus();
                    editButtonClicksCount >= 2? updateTreatmentInfo(e, form): editButtonClicksCount++;
                });
            });

            function updateTreatmentInfo(e, form){
                e.preventDefault();
                editButtonClicksCount = 0;
                // TODO: Update database information
                // NOTE: If response from server is `200 OK`, then all the form's fields default values must be updated to the new ones
                // Resetting the buttons' default attributes and icons
                resetTreatmentsList(form);
            }

            function resetTreatmentsList(form){
                const resetTreatmentButton = form.querySelector('button[data-btn-action="Remove"]');
                const submitTreatmentButton = form.querySelector('button[data-btn-action="Edit"]');
                resetTreatmentButton.childNodes[0].src = "/assets/icons/erase.svg";
                submitTreatmentButton.setAttribute('type', 'button');
                submitTreatmentButton.childNodes[0].src = "/assets/icons/edit.svg";
                const formFields = form.querySelectorAll('input, textarea');
                // Disabling all fields and re-enabling edit and remove buttons
                formFields.forEach(field => {
                    field.setAttribute('disabled', undefined);
                });
                form.parentNode.querySelectorAll(`form:not([method="dialog"])`).forEach(treatmentForm => {
                    treatmentForm.querySelectorAll('button').forEach(button => button.removeAttribute('disabled'));
                });
                document.querySelector('#newTreatment').removeAttribute('disabled');
            }
        </script>
    </body>
</html>