// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID Int @id @default(autoincrement())
  firstName String
  lastName String

  // NOTE: Foreign key "links"
  credential Credentials[]
  plantation Plantation[]
  notification Notification[]
}

model Credentials {
  email String @id
  password String
  githubID String?
  googleID String?
  verified Boolean @default(false)
  userID Int @unique
  verification Verification[]
  passwordReset PasswordReset[]
  // NOTE: Foreign key (1:N relation with `User` table)
  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Verification {
  messageID Int @id @default(autoincrement())
  email String

  credential Credentials @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
}

model PasswordReset {
  messageID Int @id @default(autoincrement())
  userID Int

  credential Credentials @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Notification{
  notificationID Int @id @default(autoincrement())
  message String
  notificationType String
  notificationIcon String @default("warning_green.svg")
  userID Int

  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)
}

model Location{
  locationID Int @id @default(autoincrement())
  locationName String?
  locationCAP String? @db.Char(5)
  locationLat Float
  locationLong Float

  plantation Plantation[]
}

model Plantation {
  plantationID Int @id @default(autoincrement())
  plantationName String
  imageURL String @db.VarChar(500) @default("plantation.webp")
  userID Int
  locationID Int?

  location Location? @relation(fields: [locationID], references: [locationID], onDelete: SetNull)
  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)

  plantation_plant Plantation_Plant[]
}

model Plant {
  plantID Int @id @default(autoincrement())
  plantName String
  plantFamily String?
  plantDescription String?
  scientificName String
  imageURL String @db.VarChar(500) @default("plant.webp")

  plantation_plant Plantation_Plant[]
}

model PlannedTreatment {
  treatmentID Int @id @default(autoincrement())
  treatmentType String
  notes String @db.VarChar(300)
  treatmentDate DateTime
  treatmentRecurrence Int @default(0)
  plantationPlantID Int

  plantationPlant Plantation_Plant @relation(fields: [plantationPlantID], references: [plantationPlantID], onDelete: Cascade)
}

model Plantation_Plant {
  plantationPlantID Int @id @default(autoincrement())
  plantationID Int
  plantID Int
  
  plannedTreatment PlannedTreatment[]

  plantation Plantation @relation(fields: [plantationID], references: [plantationID], onDelete: Cascade)
  plant Plant @relation(fields: [plantID], references: [plantID], onDelete: Cascade)
}